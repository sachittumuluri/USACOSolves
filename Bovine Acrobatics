//#include <iostream>
//#include <vector>
//#include <algorithm>
//#include <queue>

#include <bits/stdc++.h>

using namespace std;


int n, m, k;
long long a[200005];
long long w[200005];

vector<pair<long long, long long> > v;


int h[200005];
int l[200005];

int main(){
    cin >> n >> m >> k;
    
    for(int i = 0; i < n; i ++){
        cin >> w[i] >> a[i];
        v.push_back({w[i], a[i]});
    }
    sort(v.begin(), v.end());
    reverse(v.begin(), v.end());
    
    for(int i = 0; i < n; i ++){
        w[i] = v[i].first;
        a[i] = v[i].second;
    }
    priority_queue<pair<long long, long long> > Q;
    Q.push({1e18, m});
    long long ans = 0;
    
    for(int i = 0; i < n; i ++){
        if(Q.top().first - w[i] < k) continue;
        
        while(Q.top().first - w[i] >= k && a[i] > 0){
            long long f = Q.top().first;
            long long s = Q.top().second;
            long long add = min(a[i], s);
            a[i] -= add;
            ans  += add;
            Q.pop();
            Q.push({w[i], add});
            if(s - add > 0){
                Q.push({f, s - add});
            }
        }
    }
    cout << ans << endl;
//
//
//
//
//
//    for(int i = 0; i < n; i ++){
//        a[i] = v[i].second;
//    }
//    vector<pair<long long, long long> > V;
//    for(int i = 0; i < n; i ++){
//        V.push_back({v[i].first, (i+1)});
//        if(v[i].first - k >= 1){
//            V.push_back({v[i].first - k, -(i+1)});
//        }
//    }
//    sort(V.begin(), V.end());
//    long long pr = -1;
//    int va = -1;
//    for(auto u : V){
//        if(u.first != pr){
//            va ++;
//            pr = u.first;
//        }
//        if(u.second < 0){
//            l[-(u.second)-1] = va;
//        }
//        else{
//            h[u.second-1] = va;
//        }
//    }
//    for(int i = 0; i < n; i ++){
//        cout<<l[i]<<' '<<h[i]<<' '<<a[i]<<endl;
//    }
    return 0;
}
//3 5 2
//9 4
//7 6
//5 5
