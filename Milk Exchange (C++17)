#include <bits/stdc++.h>

#define ll long long
#define pb push_back
#define smin(a, b) a = min(a, b)
#define smax(a, b) a = max(a, b)
#define bithigh(a) (63-__builtin_clzll(a))
#define lg bithigh
#define highpow(a) (1LL << (ll)lg(a))
#define N (int)(5e5+10)

using namespace std;

const int INF = 2e9;
ll n, m, a[N], l[N], r[N], q[N], lookup[20][N];
array<vector<int>, 2> v[2*N];

ll Get(int l, int r){

    int d = highpow(r-l+1);
    return min(lookup[lg(d)][l], lookup[lg(d)][r-d+1]);
}

ll Query(int l, int r){

    if (l <= r) return Get(l, r);
    return min(Get(l, n-1), Get(0, r));
}

int BS(int i){

    int l = 1, r = n-1, ans = 0;
    while (l <= r){
        int k = (l + r + 1) >> 1;
        if (Query((i+1)%n, (i+k)%n) > a[i]){
            ans = k;
            l = k + 1;
        }
        else r = k - 1;
    }
    return ans;
}

int GetD(int i, int k){
    int d = 0;
    if (r[i] > k) d++;
    if (l[i] <= k) d--;
    return d;
}

int main(){

    ios::sync_with_stdio(false);
    cin.tie(0); cout.tie(0); cerr.tie(0);
    cin >> n;
    for (int i = 0; i < n; i++){
        cin >> a[i];
        lookup[0][i] = a[i];
    }
    for (int d = 1; d <= lg(n); d++)
        for (int i = 0; i + (1 << (d-1)) < n; i++)
            lookup[d][i] = min(lookup[d-1][i], lookup[d-1][i + (1 << (d-1))]);
    for (int i = 0; i < n; i++){
        r[i] = BS(i);
        v[i+1][0].pb(i);
        v[i+r[i]+1][1].pb(i);
        l[i] = INF;
    }
    multiset<int> ms;
    for (int i = 0; i < 2*n; i++){
        for (int j : v[i][0])
            ms.insert(j);
        for (int j : v[i][1])
            ms.erase(ms.find(j));
        if (ms.size()){
            int j = *ms.rbegin();
            smin(l[i%n], (ll)(i-j-1));
        }
    }
    ll sum = 0;
    for (int i = 0; i < n; i++){
        sum += a[i];
        int d = GetD(i, 0);
        q[0] += d*a[i];
        int d1 = GetD(i, min(l[i], r[i]));
        q[min(l[i], r[i])] += (d1-d)*a[i];
        if (l[i] != INF){
            int d2 = GetD(i, max(l[i], r[i]));
            q[max(l[i], r[i])] += (d2-d1)*a[i];
            if (d2 == -1){
                int s = d*min(l[i], r[i]) + d1*abs(r[i] - l[i]) + 1;
                q[max(l[i], r[i])+s] += a[i];
            }
        }
    }
    ll delta = 0;
    for (int i = 0; i < n; i++){
        delta += q[i];
        sum += delta;
        cout << sum << "\n";
    }
    return 0;
}
